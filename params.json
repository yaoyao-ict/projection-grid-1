{
  "name": "Projection-grid-1",
  "tagline": "",
  "body": "# projection-grid\r\n[![Build Status][travis-image]][travis-url]\r\n[![Coverage percentage][coveralls-image]][coveralls-url]\r\n\r\n>Client side grid control in JavaScript using pipe and filter patterns. Our data starts its journey at a data-source (OData, Memory, Mock) and travels through multiple filters before it makes it to the grid renderer. Those filters are called 'projections'.\r\n\r\n## Install\r\n```bash\r\nnpm install --save projection-grid\r\n```\r\n\r\n## Usage\r\n\r\n### As AMD\r\n```javascript\r\nrequire(['projection-grid'], function (pgrid) {\r\n  var gridView = pgrid.factory().create({\r\n    el: '.some-css-selector',\r\n    dataSource: {\r\n      type: 'js-data',\r\n      resource: someJSDataResource,\r\n    },\r\n    columns: [\r\n      { name: 'Foo' },\r\n      { name: 'Bar', template: someTemplate },\r\n    ],\r\n  }).gridView;\r\n\r\n  gridView.render();\r\n});\r\n```\r\n\r\n### As CommonJS\r\n```javascript\r\nvar pgrid = require('projection-grid');\r\n\r\nvar gridView = pgrid.factory().create({\r\n  el: '.some-css-selector',\r\n  dataSource: {\r\n    type: 'js-data',\r\n    resource: someJSDataResource,\r\n  },\r\n  columns: [\r\n    { name: 'Foo' },\r\n    { name: 'Bar', template: someTemplate },\r\n  ],\r\n}).gridView;\r\n\r\ngridView.render();\r\n```\r\n\r\n## Play with the demos\r\n```bash\r\ngit clone https://github.com/Microsoft/projection-grid\r\ncd projection-grid\r\nnpm install\r\ngulp demos\r\n```\r\n\r\nA demo server will start at http://localhost:8080/demos/, each sub-folders of\r\n`demos` would be a standalone demo page.\r\n\r\nThe standard usage is demoed at http://localhost:8080/demos/factory\r\n\r\nThe source code is `demos/factory/index.js`.\r\n\r\n## Configurations\r\nThe configuration object passed to `factory.create(...)`.\r\n\r\n### `el`\r\nThe root element of the grid. It should be a CSS selector.\r\n\r\n### `dataSource`\r\nData source of the grid. Tells grid where to get the row data.\r\n\r\n### `dataSource.type`\r\nThe type of the data source. Available values are\r\n\r\n* `'js-data'`, the JSData data source\r\n* `'memory'`, the memory data source\r\n\r\nThe default value is `'memory'`.\r\n\r\n### `dataSource.data`\r\nAn option of `'memory'` data source which should be an array of row data, or\r\na Backbone.Collection.\r\n\r\n### `dataSource.resource`\r\nAn option of `'js-data'` data source which is a [JSData Resource][js-data-resource].\r\n\r\n### `dataSource.schema`\r\nAn optional [JSON schema][json-schema] object specifying the schema of the row data.\r\n\r\n### `columns`\r\nAn array of grid column configuration objects.\r\n\r\n### `columns[].name`\r\nThe name of the column. By default, it's also the `title` showing in the column\r\nheader, the `field` of the cell data.\r\n\r\n### `columns[].title`\r\nThe title showing in the column header. It overrides the `columns[].name`.\r\n\r\n### `columns[].field`\r\nThe field of the cell data. It overrides the `columns[].name`.\r\nIn case you row data is in form of\r\n```json\r\n{\r\n  \"companyName\": \"Microsoft Corporation\",\r\n  \"address\": {\r\n    \"country\": \"USA\",\r\n    \"state\": \"WA\",\r\n    \"city\": \"Redmond\",\r\n    \"street\": \"One Microsoft Way\",\r\n    \"zip\": \"98053\"\r\n  }\r\n}\r\n```\r\n* To reference the company name, the field should be `companyName`.\r\n* To reference the zip code, the field should be `address/zip`.\r\n\r\n### `columns[].value`\r\nA function to calculate the cell value from the row data. It's used in complex\r\nscenarios when the cell value is not a field of the row data. For example,\r\n```javascript\r\n// A column of combined address information\r\n{\r\n  name: 'address',\r\n  value: function (rowData) {\r\n    return [\r\n      rowData.street,\r\n      rowData.city,\r\n      rowData.state,\r\n      rowData.country,\r\n      rowData.zip,\r\n    ].join(', ');\r\n  },\r\n}\r\n```\r\n\r\n### `columns[].template`\r\nA template function to generate the HTML in cells.\r\n\r\n### `columns[].headerTemplate`\r\nA template function to generate the HTML in column header.\r\n\r\n### `columns[].View`\r\nA Backbone view class to render the data cells. It will be instantiated with\r\n`{ model: dataOfTheRow }`. Within the view, you can access the row data with\r\n`this.model`.\r\n\r\n### `columns[].HeaderView`\r\nA Backbone view class to render the header cell.\r\n\r\n### `columns[].attributes`\r\nUser defined attributes attached to the cells (`TD`).\r\n\r\n### `columns[].headerAttributes`\r\nUser defined attributes attached to the column header (`TH`).\r\n\r\n### `columns[].locked`\r\nA boolean value specifies whether or not the column is locked.\r\nLocked columns are always visible when column shifter is on.\r\n\r\n### `columns[].hidden`\r\nA boolean value specifies whether or not the column is hide.\r\n\r\n### `columns[].sortable`\r\nA boolean value specifies whether the column is sortable by clicking the header.\r\n\r\n### `columns[].editable`\r\nA boolean value specifies whether the cell data is editable with a pop up editor.\r\n\r\n### `pageable`\r\nDefine the pagination behavior.\r\n\r\n### `pageable.pageSize`\r\nThe default page size.\r\n\r\n### `pageable.pageSizes`\r\nAn array of available page sizes.\r\n\r\n### `selectable`\r\nBoolean or string value. Available values are\r\n* `false`, no selection support\r\n* `true`, multiple selection, show a checkbox column to the left\r\n* `'single'`, single selection, show a radio button column to the left\r\n\r\n### `scrollable`\r\nScroll behavior configurations.\r\n\r\n### `scrollable.virtual`\r\nA boolean value telling whether or not the virtualization is turned on.\r\n\r\n### `scrollable.fixedHeader`\r\nFixed header configuration. If it's a truthy value, the grid header will stick\r\nto a container when scrolled out of it. The default container is the browser\r\nwindow.\r\n\r\n### `scrollable.fixedHeader.container`\r\nA CSS selector specifying the container element the header sticks to.\r\n\r\n### `columnShifter`\r\nColumn shifter configurations. Column shifter limit the number of visible\r\ncolumns, and provide a pair of control button to shift the columns.\r\n\r\n### `columnShifter.totalColumns`\r\nThe number of visible columns.\r\n\r\n### `aggregate`\r\nConfigurations of aggregation rows\r\n\r\n### `aggregate.top`\r\nA function returning an array of aggregation row data for the rows showing on\r\ntop of the grid.\r\n\r\n### `aggregate.bottom`\r\nA function returning an array of aggregation row data for the rows showing at\r\nthe bottom of the grid.\r\n\r\n## Create accessory views with plugins\r\nThe `factory.create(...)` method not only create the grid view, it can also\r\ncreate accessory views, like pager, and hook them up. The factory plugins are\r\ndesigned to handle this.\r\n\r\n### Using a plugin\r\nIn case we have a `pagerView` defined in `pager-view-plugin.js`\r\n(Refer to the factory demo). The code using it should be something like\r\n```javascript\r\nvar pgrid = require('projection-grid');\r\n// load the plugin\r\nvar pagerViewPlugin = require('./pager-view-plugin');\r\n\r\nvar grid = pgrid.factory()\r\n  // use the plugin\r\n  .use(pagerViewPlugin)\r\n  .create({\r\n    // the grid configurations\r\n  });\r\n\r\nvar gridView = grid.gridView;\r\n// get the view\r\nvar pagerView = grid.pagerView;\r\n\r\ngridView.render();\r\npagerView.render();\r\n```\r\n\r\nIt would be even simpler with ES2015.\r\n```javascript\r\nimport pgrid from 'projection-grid';\r\nimport pagerViewPlugin from './pager-view-plugin';\r\n\r\nconst { gridView, pagerView } = pgrid.factory()\r\n  .use(pagerViewPlugin)\r\n  .create({\r\n    /// the grid configurations\r\n  });\r\n\r\ngridView.render();\r\npagerView.render();\r\n```\r\n\r\nThe object returned from `factory.create(...)` is a map, from plugin name to\r\nit's product. Technically, the `gridView` is the product of a builtin plugin\r\ncalled `'gridView'`.\r\n\r\n### Developing a plugin\r\n> To develop a grid factory plugin, you need to understand the projection grid\r\n> internal concepts like projections, renderers, layouts etc.\r\n\r\nA grid factory plugin is a function in form of\r\n```javascript\r\nfunction (definePlugin) {\r\n  definePlugin('pluginName', [\r\n    // name of dependent plugins\r\n  ], function (/* product of dependent plugins */) {\r\n\r\n    // create and return the product\r\n\r\n  });\r\n}\r\n```\r\nThe `definePlugin` is a function similar to the `define` of AMD. It's defined by\r\nthe factory, having the factory context.\r\n\r\nFor example, the pager plugin is defined like this.\r\n```javascript\r\nimport _ from 'underscore';\r\nimport { PaginationView } from 'pagination-control';\r\n\r\nexport default definePlugin => definePlugin('pagerView', [\r\n  // builtin plugin, returning the configuration object\r\n  'config',\r\n  // builtin plugin, the chained projections of the grid\r\n  'projection',\r\n  // builtin plugin, the final grid view\r\n  'gridView',\r\n], function (config, projection, gridView) {\r\n\r\n  // create the pager view\r\n  const pagerView = new PaginationView(_.defaults({\r\n    pageSize: config.pageable.pageSize,\r\n    availablePageSizes: config.pageable.pageSizes,\r\n  }, config.pagerView));\r\n\r\n  // hook up the pager view with the grid and the projection chain\r\n  gridView.on('change:data', function (model) {\r\n    pagerView.itemCount = model.get('count');\r\n  });\r\n\r\n  pagerView.on('change:page-size', function (pageSize) {\r\n    projection.set('page.size', pageSize);\r\n  });\r\n\r\n  pagerView.on('change:page-number', function (pageNumber) {\r\n    projection.set('page.number', pageNumber);\r\n  });\r\n\r\n  // return the pager view\r\n  return pagerView;\r\n});\r\n```\r\n\r\n## Developer instructions\r\n\r\n1. Create your own fork of the project\r\n2. Clone your own fork of the project to local\r\n\r\n  ```bash\r\n  git clone https://github.com/your-github-user-name/projection-grid\r\n  ```\r\n\r\n3. Install dependencies\r\n\r\n  ```bash\r\n  cd projection-grid\r\n  npm install\r\n  ```\r\n\r\n4. Launch demo server which watch and build your changes automatically\r\n\r\n  ```bash\r\n  gulp demos\r\n  ```\r\n\r\n5. Make changes with your favorite editor\r\n6. Add unit test cases under `spec`\r\n7. If necessary, add your own demo page under `demos`\r\n8. Add selenium test cases under `demos/your-demo-page/spec`\r\n9. Test your changes with\r\n\r\n  ```bash\r\n  gulp test\r\n  ```\r\n\r\n10. Commit your local changes and push to GitHub\r\n\r\n  ```bash\r\n  git add .\r\n  git commit\r\n  git push\r\n  ```\r\n\r\n11. Send pull request on GitHub and review it with the management team\r\n\r\n[js-data-resource]: http://www.js-data.io/docs/resources\r\n[json-schema]: http://json-schema.org/\r\n[travis-image]: https://travis-ci.org/lesliekim/projection-grid.svg?branch=master\r\n[travis-url]: https://travis-ci.org/lesliekim/projection-grid\r\n[coveralls-image]: https://coveralls.io/repos/github/lesliekim/projection-grid/badge.svg?branch=master\r\n[coveralls-url]:https://coveralls.io/github/lesliekim/projection-grid?branch=master",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}